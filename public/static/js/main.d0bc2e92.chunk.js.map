{"version":3,"sources":["components/dialogs/AddRoom.tsx","components/dialogs/ConnectToRoom.tsx","components/Rooms.tsx","components/common/Snack.tsx","components/Chat.tsx","components/dialogs/Help.tsx","components/App.tsx","index.tsx"],"names":["AddRoom","props","onClose","open","useState","roomName","setRoomName","userName","setUserName","password","setPassword","Dialog","className","onSubmit","event","preventDefault","toLocaleLowerCase","trim","private","DialogTitle","TextField","autoFocus","margin","fullWidth","placeholder","required","value","onInput","target","type","Button","variant","color","disabled","length","ConnectToRoom","room","name","onChange","Rooms","socket","current","changeRoom","rooms","setRooms","create","setCreate","roomForConnect","setRoomForConnect","useEffect","on","emit","undefined","map","r","filter","param","user","Drawer","Typography","IconButton","onClick","size","Add","List","ListItem","button","key","ListItemIcon","Badge","badgeContent","users","Lock","LockOpen","Snack","setOpen","message","setMessage","setVariant","showSnack","Snackbar","autoHideDuration","SnackbarContent","style","background","Error","CheckCircle","action","Close","Chat","updateRoom","word","setWord","setUsers","messages","setMessages","timer","setTimer","tick","setTick","active","setActive","stopTimer","clearInterval","id","params","prevs","setInterval","prev","window","addEventListener","changeMaxHeight","removeEventListener","some","u","wordsBody","document","getElementById","scrollTo","scrollHeight","messageBody","maxHeight","setMaxHeight","usersContainer","offsetHeight","getUserColors","currentUser","find","score","Chip","label","border","to","substring","indexOf","arrTo","split","includes","item","mes","join","push","addUserToSendingMessage","flexGrow","index","author","replace","from","sendMessage","width","maxWidth","words","LinearProgress","minHeight","sendWord","getNameActivUser","HelpDlg","DialogContent","align","DialogActions","socketIOClient","theme","createMuiTheme","palette","primary","lime","secondary","grey","ReactDOM","render","ThemeProvider","setRoom","setUser","help","setHelp","Help","marginLeft","cursor"],"mappings":"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","file":"static/js/main.d0bc2e92.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { RoomParam } from \"../../types\";\r\nimport { Dialog, DialogTitle, TextField, Button } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  open: boolean;\r\n  onClose: (room?: RoomParam) => any;\r\n};\r\n\r\nexport default function AddRoom(props: Props) {\r\n  const { onClose, open } = props;\r\n  const [roomName, setRoomName] = useState<string>(\"\");\r\n  const [userName, setUserName] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n\r\n  function reset() {\r\n    setRoomName(\"\");\r\n    setUserName(\"\");\r\n    setPassword(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={() => {\r\n        onClose();\r\n        reset();\r\n      }}\r\n      open={open}\r\n    >\r\n      <form\r\n        className=\"flex column m-20\"\r\n        onSubmit={event => {\r\n          event.preventDefault();\r\n          roomName &&\r\n            userName &&\r\n            onClose({\r\n              roomName: roomName.toLocaleLowerCase().trim(),\r\n              userName: userName.toLocaleLowerCase().trim(),\r\n              private: password ? true : false,\r\n              password\r\n            });\r\n        }}\r\n      >\r\n        <DialogTitle>Новая комната</DialogTitle>\r\n        <TextField\r\n          autoFocus\r\n          margin=\"normal\"\r\n          fullWidth\r\n          placeholder=\"Навзвание комнаты\"\r\n          required\r\n          value={roomName}\r\n          onInput={(event: any) => setRoomName(event.target.value)}\r\n        />\r\n        <TextField\r\n          margin=\"normal\"\r\n          fullWidth\r\n          placeholder=\"Псевдоним\"\r\n          required\r\n          value={userName}\r\n          onInput={(event: any) => setUserName(event.target.value)}\r\n        />\r\n        <TextField\r\n          margin=\"normal\"\r\n          fullWidth\r\n          placeholder=\"Пароль\"\r\n          type=\"password\"\r\n          value={password}\r\n          onInput={(event: any) => setPassword(event.target.value)}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={\r\n            !(\r\n              roomName &&\r\n              roomName.length < 11 &&\r\n              userName &&\r\n              userName.length < 11\r\n            )\r\n          }\r\n        >\r\n          Создать\r\n        </Button>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { RoomParam, Room } from \"../../types\";\r\nimport { Dialog, DialogTitle, TextField, Button } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  open: boolean;\r\n  room: Room;\r\n  onClose: (room?: RoomParam) => any;\r\n};\r\n\r\nexport default function ConnectToRoom(props: Props) {\r\n  const { onClose, open, room } = props;\r\n  const [userName, setUserName] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n\r\n  function reset() {\r\n    setUserName(\"\");\r\n    setPassword(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={() => {\r\n        onClose();\r\n        reset();\r\n      }}\r\n      open={open}\r\n    >\r\n      <form\r\n        className=\"flex column m-20\"\r\n        onSubmit={event => {\r\n          event.preventDefault();\r\n          userName &&\r\n            onClose({\r\n              roomName: room.name,\r\n              userName: userName.toLocaleLowerCase().trim(),\r\n              private: room.private,\r\n              password\r\n            });\r\n        }}\r\n      >\r\n        <DialogTitle>Подключение к комнате</DialogTitle>\r\n        <TextField\r\n          autoFocus\r\n          margin=\"normal\"\r\n          fullWidth\r\n          placeholder=\"Псевдоним\"\r\n          required\r\n          value={userName}\r\n          onChange={event => setUserName(event.target.value)}\r\n        />\r\n        {room.private && (\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            placeholder=\"Пароль\"\r\n            type=\"password\"\r\n            required\r\n            value={password}\r\n            onChange={event => setPassword(event.target.value)}\r\n          />\r\n        )}\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={\r\n            !(\r\n              userName &&\r\n              userName.length < 11 &&\r\n              (room.private ? password : true)\r\n            )\r\n          }\r\n        >\r\n          Создать\r\n        </Button>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Room, RoomParam, User, ConnectToRoomParam } from \"../types\";\r\nimport {\r\n  Button,\r\n  Typography,\r\n  IconButton,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Badge\r\n} from \"@material-ui/core\";\r\nimport { Add, Lock, LockOpen } from \"@material-ui/icons\";\r\nimport AddRoom from \"./dialogs/AddRoom\";\r\nimport ConnectToRoom from \"./dialogs/ConnectToRoom\";\r\n\r\ntype Props = {\r\n  socket: SocketIOClient.Socket;\r\n  current: Room | undefined;\r\n};\r\n\r\ntype Events = {\r\n  changeRoom: (room: Room | undefined, user: User | undefined) => any;\r\n};\r\n\r\nexport default function Rooms(props: Props & Events) {\r\n  const { socket, current, changeRoom } = props;\r\n  const [rooms, setRooms] = useState<Room[]>([]);\r\n  const [create, setCreate] = useState(false);\r\n  const [roomForConnect, setRoomForConnect] = useState<Room>();\r\n\r\n  useEffect(() => {\r\n    socket.on(\"connected\", () => socket.emit(\"get-rooms\"));\r\n    socket.on(\"return-rooms\", (rooms: Room[]) => {\r\n      setRooms(rooms);\r\n      changeRoom(undefined, undefined);\r\n    });\r\n    socket.on(\"new-room\", (room: Room) => setRooms(rooms => [...rooms, room]));\r\n    socket.on(\"change-room\", (room: Room) =>\r\n      setRooms(rooms => rooms.map(r => (r.name === room.name ? room : r)))\r\n    );\r\n    socket.on(\"delete-room\", (roomName: string) => {\r\n      setRooms(rooms => rooms.filter(room => room.name !== roomName));\r\n      if (current && roomName === current.name) {\r\n        changeRoom(undefined, undefined);\r\n      }\r\n    });\r\n    socket.on(\"come-room\", (param: ConnectToRoomParam) => {\r\n      setRooms(rooms =>\r\n        rooms.map(room => (room.name === param.room.name ? param.room : room))\r\n      );\r\n      changeRoom(param.room, param.user);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <AddRoom\r\n        open={create}\r\n        onClose={(param?: RoomParam) => {\r\n          param && socket.emit(\"create-room\", param);\r\n          setCreate(false);\r\n        }}\r\n      />\r\n      {roomForConnect && (\r\n        <ConnectToRoom\r\n          open={roomForConnect !== undefined}\r\n          room={roomForConnect}\r\n          onClose={(param?: RoomParam) => {\r\n            param && socket.emit(\"connect-room\", param);\r\n            setRoomForConnect(undefined);\r\n          }}\r\n        />\r\n      )}\r\n      <Drawer variant=\"permanent\" className=\"drawer\">\r\n        <div className=\"flex row v-center\">\r\n          <Typography variant=\"h6\" className=\"m-10\">\r\n            Список комнат\r\n          </Typography>\r\n          {!current && (\r\n            <IconButton\r\n              color=\"primary\"\r\n              onClick={() => setCreate(true)}\r\n              size=\"small\"\r\n              className=\"m-10\"\r\n            >\r\n              <Add />\r\n            </IconButton>\r\n          )}\r\n        </div>\r\n        <List>\r\n          {rooms.map(room => (\r\n            <ListItem button key={room.name}>\r\n              <ListItemIcon>\r\n                <Badge color=\"primary\" badgeContent={room.users}>\r\n                  {room.private ? <Lock /> : <LockOpen />}\r\n                </Badge>\r\n              </ListItemIcon>\r\n              <Button\r\n                variant=\"contained\"\r\n                color={\r\n                  current && current.name === room.name\r\n                    ? \"primary\"\r\n                    : \"secondary\"\r\n                }\r\n                fullWidth\r\n                onClick={() => !current && setRoomForConnect(room)}\r\n              >\r\n                {room.name}\r\n              </Button>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Snackbar, SnackbarContent, IconButton } from \"@material-ui/core\";\r\nimport { Close, Error, CheckCircle } from \"@material-ui/icons\";\r\n\r\ntype Props = {\r\n  socket: SocketIOClient.Socket;\r\n};\r\n\r\nexport default function Snack(props: Props) {\r\n  const { socket } = props;\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [variant, setVariant] = useState<\"#43a047\" | \"#d32f2f\">();\r\n\r\n  useEffect(() => {\r\n    socket.on(\"err\", (message: string) => showSnack(\"#d32f2f\", message));\r\n    socket.on(\"word-err\", (message: string) => showSnack(\"#d32f2f\", message));\r\n  }, []);\r\n\r\n  function showSnack(variant: \"#43a047\" | \"#d32f2f\", message: string) {\r\n    setVariant(variant);\r\n    setMessage(message);\r\n    setOpen(true);\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={open}\r\n      autoHideDuration={6000}\r\n      onClose={() => setOpen(false)}\r\n    >\r\n      <SnackbarContent\r\n        style={{ background: variant, color: \"white\" }}\r\n        message={\r\n          <span className=\"flex row v-center\">\r\n            {variant === \"#d32f2f\" && <Error className=\"m-10\" />}\r\n            {variant === \"#43a047\" && <CheckCircle className=\"m-10\" />}\r\n            {message}\r\n          </span>\r\n        }\r\n        action={[\r\n          <IconButton\r\n            key={variant}\r\n            color=\"inherit\"\r\n            onClick={() => setOpen(false)}\r\n          >\r\n            <Close />\r\n          </IconButton>\r\n        ]}\r\n      />\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Badge,\r\n  Chip,\r\n  Button,\r\n  LinearProgress\r\n} from \"@material-ui/core\";\r\nimport { User, Room, UpdatedWordList, Message } from \"../types\";\r\n\r\ntype Props = {\r\n  socket: SocketIOClient.Socket;\r\n  user: User;\r\n  room: Room;\r\n  updateRoom: (room: Room | undefined) => any;\r\n};\r\n\r\nexport default function Chat(props: Props) {\r\n  const { socket, user, room, updateRoom } = props;\r\n  const [word, setWord] = useState(\"\");\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n\r\n  const [timer, setTimer] = useState(0);\r\n  const [tick, setTick] = useState<any>();\r\n  const [active, setActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"get-users\", room.name);\r\n    socket.on(\"return-users\", setUsers);\r\n    socket.on(\"user-connected\", (user: User) => {\r\n      setUsers(users => [...users, user]);\r\n    });\r\n    socket.on(\"user-disconnected\", (id: string) => {\r\n      setUsers(users => users.filter(user => user.id !== id));\r\n    });\r\n    socket.on(\"update-words\", (param: UpdatedWordList) => {\r\n      updateRoom(param.room);\r\n      setUsers(param.users);\r\n    });\r\n    socket.on(\"send-message\", (params: Message) => {\r\n      setMessages(prevs => [...prevs, params]);\r\n    });\r\n    socket.on(\"word-err\", () => continueTimer());\r\n    window.addEventListener(\"resize\", changeMaxHeight);\r\n    return () => window.removeEventListener(\"resize\", changeMaxHeight);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (users.length === 1 && active) stopTimer();\r\n    if (users.length > 1 && users.some(u => user.id === u.id && u.active))\r\n      !active && startTimer();\r\n    const wordsBody = document.getElementById(\"words-body\");\r\n    wordsBody && wordsBody.scrollTo(0, wordsBody.scrollHeight);\r\n  }, [users]);\r\n\r\n  useEffect(() => {\r\n    if (timer < 0) {\r\n      stopTimer();\r\n      socket.emit(\"skip-user\", { roomName: room.name, userName: user.name });\r\n    }\r\n  }, [timer]);\r\n\r\n  useEffect(() => {\r\n    const messageBody = document.getElementById(\"message-body\");\r\n    messageBody && messageBody.scrollTo(0, messageBody.scrollHeight);\r\n  }, [messages]);\r\n\r\n  function startTimer() {\r\n    setActive(true);\r\n    setTimer(100);\r\n    setTick(setInterval(() => setTimer(prev => prev - 2), 1000));\r\n  }\r\n\r\n  function continueTimer() {\r\n    setActive(true);\r\n    setTick(setInterval(() => setTimer(prev => prev - 2), 1000));\r\n  }\r\n\r\n  function stopTimer() {\r\n    setActive(false);\r\n    clearInterval(tick);\r\n  }\r\n\r\n  function sendWord(event: any) {\r\n    event.preventDefault();\r\n    if (!word) {\r\n      return;\r\n    }\r\n    stopTimer();\r\n    if (word === \"skip\" || word === \"пропустить\") {\r\n      socket.emit(\"skip-user\", { roomName: room.name, userName: user.name });\r\n      setWord(\"\");\r\n    } else {\r\n      socket.emit(\"send-word\", {\r\n        roomName: room.name,\r\n        word: word\r\n      });\r\n      setWord(\"\");\r\n    }\r\n  }\r\n\r\n  function sendMessage(event: any) {\r\n    event.preventDefault();\r\n    let to = message.substring(message.indexOf(\"<\"), message.indexOf(\">\") + 1);\r\n    let mes = message.replace(to, \"\").trim();\r\n    if (!mes) {\r\n      return;\r\n    }\r\n    socket.emit(\"send-message\", {\r\n      roomName: room.name,\r\n      from: user.name,\r\n      to: to\r\n        .replace(\"<\", \"\")\r\n        .replace(\">\", \"\")\r\n        .split(\",\"),\r\n      message: mes\r\n    });\r\n    setMessage(\"\");\r\n  }\r\n\r\n  const [maxHeight, setMaxHeight] = useState<number | string>(\"unset\");\r\n\r\n  function changeMaxHeight() {\r\n    const usersContainer = document.getElementById(\"users-container\");\r\n    usersContainer &&\r\n      setMaxHeight(`calc(100vh - ${usersContainer.offsetHeight}px - 205px)`);\r\n  }\r\n\r\n  useEffect(() => changeMaxHeight());\r\n\r\n  function getNameActivUser() {\r\n    const active = users.find(u => u.active);\r\n    return active ? `'${active.name}'` : \"другого игрока\";\r\n  }\r\n\r\n  function getUserColors(userName: string) {\r\n    let currentUser = users.find(user => user.name === userName);\r\n    return currentUser ? currentUser.color : {};\r\n  }\r\n\r\n  function addUserToSendingMessage(name: string) {\r\n    let to = message.substring(message.indexOf(\"<\") + 1, message.indexOf(\">\"));\r\n    if (to) {\r\n      let arrTo = to.split(\",\");\r\n      if (arrTo.includes(name)) {\r\n        arrTo = arrTo.filter(item => item !== name);\r\n        setMessage(\r\n          mes =>\r\n            `${arrTo.length > 0 ? `<${arrTo.join(\",\")}> ` : \"\"}${mes.substring(\r\n              mes.indexOf(\">\") + 2\r\n            )}`\r\n        );\r\n      } else {\r\n        arrTo.push(name);\r\n        setMessage(\r\n          mes => `<${arrTo.join(\",\")}> ${mes.substring(mes.indexOf(\">\") + 2)}`\r\n        );\r\n      }\r\n    } else {\r\n      setMessage(`<${name}> ${message}`);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex column grow\">\r\n      <div className=\"flex row dark-bg\">\r\n        <Button\r\n          className=\"m-10\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            socket.emit(\"disconnect-room\", {\r\n              roomName: room.name,\r\n              userName: user.name\r\n            });\r\n            updateRoom(undefined);\r\n          }}\r\n        >\r\n          Выйти из комнаты\r\n        </Button>\r\n      </div>\r\n      <div\r\n        className=\"flex row h-center child-m-20-5 dark-bg border-t border-b\"\r\n        id=\"users-container\"\r\n      >\r\n        {users.map(user => (\r\n          <div key={user.id}>\r\n            <Badge color=\"primary\" badgeContent={user.score}>\r\n              <Chip\r\n                label={user.name}\r\n                style={{ ...user.color, border: \"1px solid\" }}\r\n                onClick={() => addUserToSendingMessage(user.name)}\r\n              />\r\n            </Badge>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"flex grow\">\r\n        <div className=\"flex column dark-bg\" style={{ flexGrow: 3 }}>\r\n          <div\r\n            className=\"message-body\"\r\n            style={{\r\n              maxHeight:\r\n                maxHeight !== \"unset\" ? `calc(${maxHeight} + 4px)` : maxHeight,\r\n              flexGrow: 1\r\n            }}\r\n            id=\"message-body\"\r\n          >\r\n            {messages.map((item, index) => (\r\n              <div\r\n                className=\"message m-10\"\r\n                key={item.author + index}\r\n                style={{ ...getUserColors(item.author) }}\r\n              >\r\n                <Typography color=\"inherit\">\r\n                  <strong>\r\n                    {item.author}\r\n                    {item.to ? ` > ${item.to}` : \"\"}\r\n                  </strong>\r\n                  <br />\r\n                  {item.message}\r\n                </Typography>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <form className=\"input-form\" onSubmit={event => sendMessage(event)}>\r\n            <TextField\r\n              placeholder=\"Введите сообщение...\"\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              value={message}\r\n              onInput={(event: any) => setMessage(event.target.value)}\r\n              style={{ width: \"calc(100% - 40px)\" }}\r\n            />\r\n          </form>\r\n        </div>\r\n        <div\r\n          className=\"flex column dark-bg\"\r\n          style={{ flexGrow: 1, maxWidth: \"450px\" }}\r\n        >\r\n          <div className=\"message-body\" style={{ maxHeight }} id=\"words-body\">\r\n            {room.words.map(item => (\r\n              <div\r\n                className=\"message m-10\"\r\n                key={item.word}\r\n                style={{ ...getUserColors(item.author) }}\r\n              >\r\n                <Typography color=\"inherit\">\r\n                  {`${item.author} :: ${item.word}`}\r\n                </Typography>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {active ? (\r\n            <LinearProgress\r\n              variant=\"determinate\"\r\n              value={timer}\r\n              color=\"primary\"\r\n            />\r\n          ) : (\r\n            <div style={{ minHeight: 4 }}></div>\r\n          )}\r\n          <form className=\"input-form\" onSubmit={event => sendWord(event)}>\r\n            <TextField\r\n              placeholder=\"Введите слово...\"\r\n              disabled={\r\n                !users.some(u => user.id === u.id && u.active) ||\r\n                users.length === 1\r\n              }\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              value={word}\r\n              onInput={(event: any) =>\r\n                setWord(event.target.value.toLocaleLowerCase().trim())\r\n              }\r\n              style={{ width: \"calc(100% - 40px)\" }}\r\n            />\r\n            {!users.some(u => user.id === u.id && u.active) ||\r\n            users.length === 1 ? (\r\n              <>\r\n                <div className=\"overlay shadow\"></div>\r\n                <div className=\"overlay flex center\">\r\n                  <Typography variant=\"h5\" color=\"inherit\">\r\n                    {users.length === 1\r\n                      ? \"Ожидайте игроков\"\r\n                      : `Сейчас ход ${getNameActivUser()}. Пожалуйста подождите`}\r\n                  </Typography>\r\n                </div>\r\n              </>\r\n            ) : null}\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { RoomParam } from \"../../types\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  Button,\r\n  Typography,\r\n  DialogContent,\r\n  DialogActions\r\n} from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  open: boolean;\r\n  onClose: (room?: RoomParam) => any;\r\n};\r\n\r\nexport default function HelpDlg(props: Props) {\r\n  const { onClose, open } = props;\r\n\r\n  return (\r\n    <Dialog onClose={() => onClose()} open={open}>\r\n      <DialogTitle>\r\n        <Typography variant=\"h4\">Правила</Typography>\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <Typography align=\"justify\">\r\n          Чтобы начать игру, необходимо подключиться к комнате или создать ее.\r\n        </Typography>\r\n        <br />\r\n        <Typography align=\"justify\">\r\n          Игроки должны отравлять слова, каждое из которых начинается с\r\n          последней буквы предыдущего слова. В противном случае, либо при\r\n          отсутсвии слова в списке разрешенных (только существительные в\r\n          единственном числе), будет выведено сообщение об ошибке. Если игрок не\r\n          может придумать слово, то он может отправить слово \"skip\" или\r\n          \"пропустить\", чтобы пропустить ход. Если игрок не отправит ничего за\r\n          50 секунд, то он автоматически пропустит ход.\r\n        </Typography>\r\n        <br />\r\n        <Typography align=\"justify\">\r\n          Для отправки приватного сообщения необходимо кликнуть по иконке\r\n          пользователя либо вписать в поле сообщения его никнейм. Например:\r\n          \"#никнейм:: привет\".\r\n        </Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => onClose()}>\r\n          Ок\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { Room, User } from \"../types\";\nimport { Typography } from \"@material-ui/core\";\nimport Rooms from \"./Rooms\";\nimport Snack from \"./common/Snack\";\nimport Chat from \"./Chat\";\nimport { Help } from \"@material-ui/icons\";\nimport HelpDlg from \"./dialogs/Help\";\n\nconst socket =\n  process.env.NODE_ENV === \"production\"\n    ? socketIOClient()\n    : socketIOClient(\"localhost:8080\");\n\nexport default function App() {\n  const [room, setRoom] = useState<Room>();\n  const [user, setUser] = useState<User>();\n  const [help, setHelp] = useState(false);\n\n  return (\n    <div className=\"flex column grow\">\n      <div className=\"flex row v-center h-between header\">\n        <div className=\"flex center\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            Чат-игра \"СЛОВА\"\n          </Typography>\n          <Help\n            style={{ marginLeft: 20, cursor: \"pointer\" }}\n            onClick={() => setHelp(true)}\n          />\n        </div>\n        <Typography variant=\"h6\" color=\"inherit\">\n          {room && user && `Комната :: ${room.name} - Никнейм :: ${user.name}`}\n        </Typography>\n      </div>\n      <div className=\"flex row grow\">\n        <Rooms\n          socket={socket}\n          current={room}\n          changeRoom={(room, user) => {\n            setRoom(room);\n            setUser(user);\n          }}\n        />\n        {room && user ? (\n          <Chat socket={socket} user={user} room={room} updateRoom={setRoom} />\n        ) : (\n          <div className=\"flex grow center dark-bg\">\n            <Typography variant=\"h4\" color=\"textPrimary\">\n              Выберите или создайте комнату :с\n            </Typography>\n          </div>\n        )}\n      </div>\n      <Snack socket={socket} />\n      <HelpDlg open={help} onClose={() => setHelp(false)} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { grey, lime } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: lime,\n    secondary: grey\n  }\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}